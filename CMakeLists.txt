cmake_minimum_required(VERSION 3.8)
project(ProtocolAnalyzer)

set(EXECUTABLE_OUTPUT_PATH   ${PROJECT_SOURCE_DIR}/bin/)
set(LIBRARY_OUTPUT_PATH   ${PROJECT_SOURCE_DIR}/lib/)
set(CMAKE_INCLUDE_PATH   /usr/include/)
set(CMAKE_LIBRARY_PATH   /usr/lib/)

set(CMAKE_CXX_STANDARD   17)
set(CMAKE_BUILD_TYPE   $ENV{BUILD_TYPE})
set(CMAKE_CXX_COMPILER   $ENV{COMPILER})

set(USEFUL_WARNINGS   "-Wno-deprecated-declarations -Wno-unused-macros -Wno-unused-parameter -Wno-unused-variable -Wno-padded -Wno-cast-qual")
set(WARNINGS   "-Wno-variadic-macros -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-exit-time-destructors -Wno-global-constructors -Wno-documentation -Wno-zero-as-null-pointer-constant")
set(ADDITIONAL_FLAGS   "-Weverything  -fsanitize=address  -fsanitize=leak  -fsanitize=undefined")
#set(ADDITIONAL_FLAGS   "-fsanitize=thread  -fsanitize=undefined  -Weverything")
#set(ADDITIONAL_FLAGS   "-fsanitize=memory  -fno-omit-frame-pointer  -Weverything")

set(CMAKE_CXX_FLAGS_DEBUG     "-g -O0 -DDEBUG  ${WARNINGS} ${ADDITIONAL_FLAGS} ${USEFUL_WARNINGS}")
set(CMAKE_CXX_FLAGS_RELEASE   "-O3 -DRELEASE   ${WARNINGS}")


# Core libraries.
set(SYSTEM_LIB       include/analyzer/System.hpp include/analyzer/Mutex.hpp      src/System.cpp src/Mutex.cpp)
set(LOGGING_LIB      include/analyzer/Log.hpp          src/Log.cpp)
set(COMMON_LIB       include/analyzer/Common.hpp include/analyzer/LockedDeque.hpp      src/Common.cpp include/analyzer/Mutex.hpp)
# Functional libraries.
set(TASK_LIB         include/analyzer/Notification.hpp)        #include/analyzer/Task.hpp src/Task.cpp src/TaskManager.cpp)
set(PARSER_LIB       include/analyzer/Parser.hpp       src/Parser.cpp)
set(PROTOCOL_LIB     include/analyzer/Protocol.hpp include/analyzer/Http.hpp   src/Protocol.cpp src/Http.cpp)
set(DIAGNOSTIC_LIB   include/analyzer/Timer.hpp        src/Timer.cpp)
set(UTILITIES_LIB    include/analyzer/Utilities.hpp    src/Utilities.cpp)
set(SOCKET_LIB       include/analyzer/Socket.hpp       src/Socket.cpp src/SocketSSL.cpp)

add_library(Common       STATIC   ${COMMON_LIB})
add_library(System       STATIC   ${SYSTEM_LIB})
add_library(Logging      STATIC   ${LOGGING_LIB})
add_library(Task         STATIC   ${TASK_LIB})
add_library(Parser       STATIC   ${PARSER_LIB})
add_library(Diagnostic   STATIC   ${DIAGNOSTIC_LIB})
add_library(Socket       STATIC   ${SOCKET_LIB})
add_library(Protocol     STATIC   ${PROTOCOL_LIB})
add_library(Utilities    STATIC   ${UTILITIES_LIB})

target_link_libraries(Logging     Common)
target_link_libraries(Parser      Logging)
target_link_libraries(Protocol    Logging)
target_link_libraries(Socket      ssl crypto Logging System)
target_link_libraries(Task        pthread Logging)
target_link_libraries(Utilities   Socket Protocol)


set(SSL_TEST                 test/test_ssl.cpp          include/analyzer/Api.hpp)
set(SOCKET_TEST              test/test_socket.cpp       include/analyzer/Api.hpp)
set(COMMON_TEST              test/test_common.cpp       include/analyzer/Api.hpp)
set(TIMING_TEST              test/test_timing.cpp       include/analyzer/Api.hpp)
#set(MANAGER_TEST             test/test_manager.cpp      include/analyzer/Api.hpp)
set(LOGGING_TEST             test/test_logging.cpp      include/analyzer/Api.hpp)
set(ANYTHING_TEST            test/test_anything.cpp     include/analyzer/Api.hpp)
set(URI_PARSER_TEST          test/test_uri_parser.cpp   include/analyzer/Api.hpp)
set(NOTIFICATION_TEST        test/test_notification.cpp include/analyzer/Notification.hpp)
set(HTTP2_NEGOTIATION_TEST   test/test_http2_negotiation.cpp   include/analyzer/Api.hpp)

add_executable(test_ssl                 ${SSL_TEST})
add_executable(test_socket              ${SOCKET_TEST})
add_executable(test_common              ${COMMON_TEST})
add_executable(test_timing              ${TIMING_TEST})
#add_executable(test_manager             ${MANAGER_TEST})
add_executable(test_logging             ${LOGGING_TEST})
add_executable(test_anything            ${ANYTHING_TEST})
add_executable(test_uri_parser          ${URI_PARSER_TEST})
add_executable(test_notification        ${NOTIFICATION_TEST})
add_executable(test_http2_negotiation   ${HTTP2_NEGOTIATION_TEST})

#target_link_libraries(test_manager             Task)
target_link_libraries(test_notification        Task System)
target_link_libraries(test_socket              Socket)
target_link_libraries(test_common              Common)
target_link_libraries(test_anything            Common System Socket Parser)
target_link_libraries(test_logging             Logging)
target_link_libraries(test_uri_parser          Protocol)
target_link_libraries(test_ssl                 Utilities)
target_link_libraries(test_http2_negotiation   Utilities)
target_link_libraries(test_timing              Diagnostic)
